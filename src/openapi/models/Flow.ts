/* tslint:disable */
/* eslint-disable */
/**
 * Vouchsafe API docs
 * Vouchsafe offers a REST API to conduct operations programmatically.  You can request and manage verifications, as well as perform smart lookups.  To use the API, you need a client ID and secret from the Vouchsafe dashboard. [Sign up here](https://app.vouchsafe.id/) if you haven\'t already.  We also have a [video guide](https://www.youtube.com/playlist?list=PLx6V6SSTMuF_ZNWBPnysvwmdIwboLViE8) showing the basics, as well as [SDKs and libraries](https://help.vouchsafe.id/en/articles/12026847-vouchsafe-sdks-and-libraries) for popular languages.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: help@vouchsafe.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The core feature of Vouchsafe is the verification flow.
 * 
 * It is a customisable set of steps that:
 * 
 * - collects and validates evidence from your end user
 * - runs background checks on that evidence and returns a result
 * 
 * You can make as many verification flows as you like for different business purposes.
 * @export
 * @interface Flow
 */
export interface Flow {
    /**
     * The ID of the flow, useful when requesting verifications
     * @type {string}
     * @memberof Flow
     */
    id: string;
    /**
     * The human-readable name of the flow
     * @type {string}
     * @memberof Flow
     */
    name: string;
    /**
     * When the flow was last modified, formatted as an ISO 8601 string
     * @type {string}
     * @memberof Flow
     */
    updated_at: string;
    /**
     * When the flow was created, formatted as an ISO 8601 string
     * @type {string}
     * @memberof Flow
     */
    created_at: string;
    /**
     * How many tokens the flow uses per completed verification. [What are tokens?](https://help.vouchsafe.id/en/articles/11075413-what-are-tokens)
     * @type {number}
     * @memberof Flow
     */
    tokens_per_verification: number;
}

/**
 * Check if a given object implements the Flow interface.
 */
export function instanceOfFlow(value: object): value is Flow {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('updated_at' in value) || value['updated_at'] === undefined) return false;
    if (!('created_at' in value) || value['created_at'] === undefined) return false;
    if (!('tokens_per_verification' in value) || value['tokens_per_verification'] === undefined) return false;
    return true;
}

export function FlowFromJSON(json: any): Flow {
    return FlowFromJSONTyped(json, false);
}

export function FlowFromJSONTyped(json: any, ignoreDiscriminator: boolean): Flow {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'updated_at': json['updated_at'],
        'created_at': json['created_at'],
        'tokens_per_verification': json['tokens_per_verification'],
    };
}

export function FlowToJSON(json: any): Flow {
    return FlowToJSONTyped(json, false);
}

export function FlowToJSONTyped(value?: Flow | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'updated_at': value['updated_at'],
        'created_at': value['created_at'],
        'tokens_per_verification': value['tokens_per_verification'],
    };
}

