/* tslint:disable */
/* eslint-disable */
/**
 * Vouchsafe API docs
 * Vouchsafe offers a REST API to conduct operations programmatically.  You can request and manage verifications, as well as perform smart lookups.  To use the API, you need a client ID and secret from the Vouchsafe dashboard. [Sign up here](https://app.vouchsafe.id/) if you haven\'t already.  We also have a [video guide](https://www.youtube.com/playlist?list=PLx6V6SSTMuF_ZNWBPnysvwmdIwboLViE8) showing the basics.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: help@vouchsafe.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RequestVerificationRequestBody
 */
export interface RequestVerificationRequestBody {
    /**
     * The user's email address
     * @type {string}
     * @memberof RequestVerificationRequestBody
     */
    email: string;
    /**
     * The user's first name, if you have it
     * @type {string}
     * @memberof RequestVerificationRequestBody
     */
    firstName?: string;
    /**
     * The user's last name, if you have it
     * @type {string}
     * @memberof RequestVerificationRequestBody
     */
    lastName?: string;
    /**
     * The user's street address, if you have it
     * @type {string}
     * @memberof RequestVerificationRequestBody
     */
    streetAddress?: string;
    /**
     * The user's postcode, if you have it
     * @type {string}
     * @memberof RequestVerificationRequestBody
     */
    postcode?: string;
    /**
     * The user's date of birth, if you have it
     * @type {string}
     * @memberof RequestVerificationRequestBody
     */
    dateOfBirth?: string;
    /**
     * Which verification flow to use.
     * 
     * Get the flow ID from the URL of the builder page.
     * 
     * For example: `/admin/teams/abc123/builder/[workflow_id]`
     * 
     * If not provided, the last published flow is used instead.
     * @type {string}
     * @memberof RequestVerificationRequestBody
     */
    workflowId?: string;
    /**
     * An identifier from your own systems, to avoid needing to store Vouchsafe's own ID
     * @type {string}
     * @memberof RequestVerificationRequestBody
     */
    externalId?: string;
    /**
     * A generic or unique URL to send the user back to upon success.
     * 
     * If not provided, the verification flow default will be used.
     * @type {string}
     * @memberof RequestVerificationRequestBody
     */
    redirectUrl?: string;
    /**
     * When will the verification session expire and the user cease getting reminders?
     * 
     * If not provided, the verification flow default will be used.
     * @type {string}
     * @memberof RequestVerificationRequestBody
     */
    expiresAt?: string;
}

/**
 * Check if a given object implements the RequestVerificationRequestBody interface.
 */
export function instanceOfRequestVerificationRequestBody(value: object): value is RequestVerificationRequestBody {
    if (!('email' in value) || value['email'] === undefined) return false;
    return true;
}

export function RequestVerificationRequestBodyFromJSON(json: any): RequestVerificationRequestBody {
    return RequestVerificationRequestBodyFromJSONTyped(json, false);
}

export function RequestVerificationRequestBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequestVerificationRequestBody {
    if (json == null) {
        return json;
    }
    return {
        
        'email': json['email'],
        'firstName': json['first_name'] == null ? undefined : json['first_name'],
        'lastName': json['last_name'] == null ? undefined : json['last_name'],
        'streetAddress': json['street_address'] == null ? undefined : json['street_address'],
        'postcode': json['postcode'] == null ? undefined : json['postcode'],
        'dateOfBirth': json['date_of_birth'] == null ? undefined : json['date_of_birth'],
        'workflowId': json['workflow_id'] == null ? undefined : json['workflow_id'],
        'externalId': json['external_id'] == null ? undefined : json['external_id'],
        'redirectUrl': json['redirect_url'] == null ? undefined : json['redirect_url'],
        'expiresAt': json['expires_at'] == null ? undefined : json['expires_at'],
    };
}

export function RequestVerificationRequestBodyToJSON(json: any): RequestVerificationRequestBody {
    return RequestVerificationRequestBodyToJSONTyped(json, false);
}

export function RequestVerificationRequestBodyToJSONTyped(value?: RequestVerificationRequestBody | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'email': value['email'],
        'first_name': value['firstName'],
        'last_name': value['lastName'],
        'street_address': value['streetAddress'],
        'postcode': value['postcode'],
        'date_of_birth': value['dateOfBirth'],
        'workflow_id': value['workflowId'],
        'external_id': value['externalId'],
        'redirect_url': value['redirectUrl'],
        'expires_at': value['expiresAt'],
    };
}

