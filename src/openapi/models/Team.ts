/* tslint:disable */
/* eslint-disable */
/**
 * Vouchsafe API docs
 * Vouchsafe offers a REST API to conduct operations programmatically.  You can request and manage verifications, as well as perform smart lookups.  To use the API, you need a client ID and secret from the Vouchsafe dashboard. [Sign up here](https://app.vouchsafe.id/) if you haven\'t already.  We also have a [video guide](https://www.youtube.com/playlist?list=PLx6V6SSTMuF_ZNWBPnysvwmdIwboLViE8) showing the basics, as well as [SDKs and libraries](https://help.vouchsafe.id/en/articles/12026847-vouchsafe-sdks-and-libraries) for popular languages.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: help@vouchsafe.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * The client ID of the team, as shown in the dashboard
     * @type {string}
     * @memberof Team
     */
    id: string;
    /**
     * The name of the team
     * @type {string}
     * @memberof Team
     */
    name: string;
    /**
     * The public name of the team, shown in end-user facing screens and communications. If set, overrides the name.
     * @type {string}
     * @memberof Team
     */
    public_name: string;
    /**
     * Which plan is the team on?
     * @type {string}
     * @memberof Team
     */
    plan: TeamPlanEnum;
    /**
     * Path to the team's logo image
     * @type {string}
     * @memberof Team
     */
    logo_url: string;
    /**
     * When the team's details were last changed, formatted as an ISO 8601 string
     * @type {string}
     * @memberof Team
     */
    updated_at: string;
    /**
     * When the team was created, formatted as an ISO 8601 string
     * @type {string}
     * @memberof Team
     */
    created_at: string;
}


/**
 * @export
 */
export const TeamPlanEnum = {
    Trial: 'Trial',
    Payg: 'PAYG',
    Flex: 'Flex',
    Enterprise: 'Enterprise'
} as const;
export type TeamPlanEnum = typeof TeamPlanEnum[keyof typeof TeamPlanEnum];


/**
 * Check if a given object implements the Team interface.
 */
export function instanceOfTeam(value: object): value is Team {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('public_name' in value) || value['public_name'] === undefined) return false;
    if (!('plan' in value) || value['plan'] === undefined) return false;
    if (!('logo_url' in value) || value['logo_url'] === undefined) return false;
    if (!('updated_at' in value) || value['updated_at'] === undefined) return false;
    if (!('created_at' in value) || value['created_at'] === undefined) return false;
    return true;
}

export function TeamFromJSON(json: any): Team {
    return TeamFromJSONTyped(json, false);
}

export function TeamFromJSONTyped(json: any, ignoreDiscriminator: boolean): Team {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'public_name': json['public_name'],
        'plan': json['plan'],
        'logo_url': json['logo_url'],
        'updated_at': json['updated_at'],
        'created_at': json['created_at'],
    };
}

export function TeamToJSON(json: any): Team {
    return TeamToJSONTyped(json, false);
}

export function TeamToJSONTyped(value?: Team | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'public_name': value['public_name'],
        'plan': value['plan'],
        'logo_url': value['logo_url'],
        'updated_at': value['updated_at'],
        'created_at': value['created_at'],
    };
}

