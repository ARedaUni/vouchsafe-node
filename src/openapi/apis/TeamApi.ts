/* tslint:disable */
/* eslint-disable */
/**
 * Vouchsafe API docs
 * Vouchsafe offers a REST API to conduct operations programmatically.  You can request and manage verifications, as well as perform smart lookups.  To use the API, you need a client ID and secret from the Vouchsafe dashboard. [Sign up here](https://app.vouchsafe.id/) if you haven\'t already.  We also have a [video guide](https://www.youtube.com/playlist?list=PLx6V6SSTMuF_ZNWBPnysvwmdIwboLViE8) showing the basics, as well as [SDKs and libraries](https://help.vouchsafe.id/en/articles/12026847-vouchsafe-sdks-and-libraries) for popular languages.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: help@vouchsafe.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  CreateTeamInput,
  CreateTeamResponse,
  Team,
} from '../models/index';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    CreateTeamInputFromJSON,
    CreateTeamInputToJSON,
    CreateTeamResponseFromJSON,
    CreateTeamResponseToJSON,
    TeamFromJSON,
    TeamToJSON,
} from '../models/index';

export interface CreateTeamRequest {
    xPartnerToken: string;
    createTeamInput: CreateTeamInput;
}

/**
 * 
 */
export class TeamApi extends runtime.BaseAPI {

    /**
     * Create a new team (Partners only).  Creates a new team with the specified configuration and admin users.  Vouchsafe will respond with:  - a unique team ID for tracking - the team name and public-facing name - client credentials to authenticate team API requests - creation timestamp (ISO 8601 format)  The provided admin emails will be granted administrative access to manage the team\'s settings and workflows.  **Note:** This endpoint requires a valid partner token in the `X-Partner-Token` header.
     */
    async createTeamRaw(requestParameters: CreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTeamResponse>> {
        if (requestParameters['xPartnerToken'] == null) {
            throw new runtime.RequiredError(
                'xPartnerToken',
                'Required parameter "xPartnerToken" was null or undefined when calling createTeam().'
            );
        }

        if (requestParameters['createTeamInput'] == null) {
            throw new runtime.RequiredError(
                'createTeamInput',
                'Required parameter "createTeamInput" was null or undefined when calling createTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xPartnerToken'] != null) {
            headerParameters['X-Partner-Token'] = String(requestParameters['xPartnerToken']);
        }


        let urlPath = `/team`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTeamInputToJSON(requestParameters['createTeamInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTeamResponseFromJSON(jsonValue));
    }

    /**
     * Create a new team (Partners only).  Creates a new team with the specified configuration and admin users.  Vouchsafe will respond with:  - a unique team ID for tracking - the team name and public-facing name - client credentials to authenticate team API requests - creation timestamp (ISO 8601 format)  The provided admin emails will be granted administrative access to manage the team\'s settings and workflows.  **Note:** This endpoint requires a valid partner token in the `X-Partner-Token` header.
     */
    async createTeam(requestParameters: CreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTeamResponse> {
        const response = await this.createTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Get the currently authenticated team.  Helpful for testing, especially when managing multiple client IDs and secrets.  > This endpoint supports sandbox mode. [See how sandbox mode works](https://help.vouchsafe.id/en/articles/11979598-how-does-sandbox-mode-work).
     */
    async getTeamRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Team>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/team`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     *  Get the currently authenticated team.  Helpful for testing, especially when managing multiple client IDs and secrets.  > This endpoint supports sandbox mode. [See how sandbox mode works](https://help.vouchsafe.id/en/articles/11979598-how-does-sandbox-mode-work).
     */
    async getTeam(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Team> {
        const response = await this.getTeamRaw(initOverrides);
        return await response.value();
    }

}
