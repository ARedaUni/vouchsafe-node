/* tslint:disable */
/* eslint-disable */
/**
 * Vouchsafe API docs
 * Vouchsafe offers a REST API to conduct operations programmatically.  You can request and manage verifications, as well as perform smart lookups.  To use the API, you need a client ID and secret from the Vouchsafe dashboard. [Sign up here](https://app.vouchsafe.id/) if you haven\'t already.  We also have a [video guide](https://www.youtube.com/playlist?list=PLx6V6SSTMuF_ZNWBPnysvwmdIwboLViE8) showing the basics.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: help@vouchsafe.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  GetSmartLookupResponse,
  PostcodeResponse,
  SmartLookupInput,
} from '../models/index';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    GetSmartLookupResponseFromJSON,
    GetSmartLookupResponseToJSON,
    PostcodeResponseFromJSON,
    PostcodeResponseToJSON,
    SmartLookupInputFromJSON,
    SmartLookupInputToJSON,
} from '../models/index';

export interface PerformSmartLookupRequest {
    smartLookupInput: SmartLookupInput;
}

export interface SearchPostcodeRequest {
    postcode: string;
}

/**
 * 
 */
export class SmartLookupsApi extends runtime.BaseAPI {

    /**
     * > This feature is currently experimental, so the only supported check is `Address` via the electoral roll. Other checks coming soon.   Run quick [background checks](https://help.vouchsafe.id/en/articles/11075009-how-background-checks-work) on a user\'s details.   Provide the user\'s details and the check or checks to run and receive the report.  First line of address should be taken from the results returned by the [`GET /postcode` endpoint](https://localhost:3000/docs/operations/SearchPostcode).
     */
    async performSmartLookupRaw(requestParameters: PerformSmartLookupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSmartLookupResponse>> {
        if (requestParameters['smartLookupInput'] == null) {
            throw new runtime.RequiredError(
                'smartLookupInput',
                'Required parameter "smartLookupInput" was null or undefined when calling performSmartLookup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/smart-lookups`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SmartLookupInputToJSON(requestParameters['smartLookupInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSmartLookupResponseFromJSON(jsonValue));
    }

    /**
     * > This feature is currently experimental, so the only supported check is `Address` via the electoral roll. Other checks coming soon.   Run quick [background checks](https://help.vouchsafe.id/en/articles/11075009-how-background-checks-work) on a user\'s details.   Provide the user\'s details and the check or checks to run and receive the report.  First line of address should be taken from the results returned by the [`GET /postcode` endpoint](https://localhost:3000/docs/operations/SearchPostcode).
     */
    async performSmartLookup(requestParameters: PerformSmartLookupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSmartLookupResponse> {
        const response = await this.performSmartLookupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Look up all addresses for a given UK postcode in the Post Office Address File.  Useful for guaranteeing that a user\'s address is recognised before onboarding.
     */
    async searchPostcodeRaw(requestParameters: SearchPostcodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostcodeResponse>> {
        if (requestParameters['postcode'] == null) {
            throw new runtime.RequiredError(
                'postcode',
                'Required parameter "postcode" was null or undefined when calling searchPostcode().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postcode'] != null) {
            queryParameters['postcode'] = requestParameters['postcode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/smart-lookups/postcode`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostcodeResponseFromJSON(jsonValue));
    }

    /**
     * Look up all addresses for a given UK postcode in the Post Office Address File.  Useful for guaranteeing that a user\'s address is recognised before onboarding.
     */
    async searchPostcode(requestParameters: SearchPostcodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostcodeResponse> {
        const response = await this.searchPostcodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
