// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ListVerificationsData, ListVerificationsResponses, ListVerificationsErrors, RequestVerificationData, RequestVerificationResponses, RequestVerificationErrors, GetVerificationData, GetVerificationResponses, GetVerificationErrors, PerformSmartLookupData, PerformSmartLookupResponses, PerformSmartLookupErrors, SearchPostcodeData, SearchPostcodeResponses, SearchPostcodeErrors, AuthenticateData, AuthenticateResponses, AuthenticateErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List all verifications for your team.
 *
 * This can be a long list, so filtering by status is recommended.
 *
 * > This endpoint supports sandbox mode. [See how sandbox mode works](https://help.vouchsafe.id/en/articles/11979598-how-does-sandbox-mode-work).
 */
export const listVerifications = <ThrowOnError extends boolean = false>(options?: Options<ListVerificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListVerificationsResponses, ListVerificationsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/verifications',
        ...options
    });
};

/**
 * Request a new verification.
 *
 * Provide the user's email and the ID of one of your verification flows to send them through.
 *
 * Vouchsafe will respond with:
 *
 * - a URL to redirect to the user to
 * - a unique ID for you to track the verification
 *
 * If you have enabled "On request creation" emails in your flow, this also sends them an email.
 *
 * You can optionally provide more information/claims about the user, like their name, date of birth and address. Any that are provided will be checked against evidence the user gives, and mismatches will be flagged.
 *
 * > This endpoint supports sandbox mode. [See how sandbox mode works](https://help.vouchsafe.id/en/articles/11979598-how-does-sandbox-mode-work).
 */
export const requestVerification = <ThrowOnError extends boolean = false>(options: Options<RequestVerificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RequestVerificationResponses, RequestVerificationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/verifications',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a single verification by ID.
 *
 * Returns the latest status and metadata for a verification you previously requested.
 *
 * > This endpoint supports sandbox mode. [See how sandbox mode works](https://help.vouchsafe.id/en/articles/11979598-how-does-sandbox-mode-work).
 */
export const getVerification = <ThrowOnError extends boolean = false>(options: Options<GetVerificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVerificationResponses, GetVerificationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/verifications/{id}',
        ...options
    });
};

/**
 * > This feature is currently experimental, so the only supported check is `Address` via the electoral roll. Other checks coming soon.
 *
 *
 * Run quick [background checks](https://help.vouchsafe.id/en/articles/11075009-how-background-checks-work) on a user's details.
 *
 *
 * Provide the user's details and the check or checks to run and receive the report.
 *
 * First line of address should be taken from the results returned by the [`GET /postcode` endpoint](https://localhost:3000/docs/operations/SearchPostcode).
 */
export const performSmartLookup = <ThrowOnError extends boolean = false>(options: Options<PerformSmartLookupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PerformSmartLookupResponses, PerformSmartLookupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/smart-lookups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Look up all addresses for a given UK postcode in the Post Office Address File.
 *
 * Useful for guaranteeing that a user's address is recognised before onboarding.
 */
export const searchPostcode = <ThrowOnError extends boolean = false>(options: Options<SearchPostcodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchPostcodeResponses, SearchPostcodeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/smart-lookups/postcode',
        ...options
    });
};

/**
 * Get the access token, needed for all other API requests.
 *
 * You will need your client ID and secret from the **API Integration** tab of the Vouchsafe dashboard.
 *
 * Each access token is valid for 24 hours, after which you will need to re-authenticate.
 *
 * Once you have an access token, pass it in future requests as a [Bearer token](https://workos.com/blog/understanding-bearer-tokens) in an `Authorization` header.
 *
 * > This endpoint supports sandbox mode. [See how sandbox mode works](https://help.vouchsafe.id/en/articles/11979598-how-does-sandbox-mode-work).
 */
export const authenticate = <ThrowOnError extends boolean = false>(options: Options<AuthenticateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthenticateResponses, AuthenticateErrors, ThrowOnError>({
        url: '/authenticate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};