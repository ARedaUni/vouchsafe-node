// This file is auto-generated by @hey-api/openapi-ts

export type RequestVerificationResponse = {
    /**
     * A unique URL to redirect the user to or embed in an iframe
     */
    url: string;
    /**
     * A unique ID for the verification session, for you to track progress
     */
    id: string;
    /**
     * When the user will stop getting reminders
     */
    expires_at: string;
};

export type ApiErrorResponse = {
    status_code: number;
    message: string;
    error_detail?: unknown;
};

export type RequestVerificationRequestBody = {
    /**
     * The user's email address
     */
    email: string;
    /**
     * The user's first name, if you have it
     */
    first_name?: string;
    /**
     * The user's last name, if you have it
     */
    last_name?: string;
    /**
     * The user's street address, if you have it
     */
    street_address?: string;
    /**
     * The user's postcode, if you have it
     */
    postcode?: string;
    /**
     * The user's date of birth, if you have it
     */
    date_of_birth?: string;
    /**
     * Which verification flow to use.
     *
     * Get the flow ID from the URL of the builder page.
     *
     * For example: `/admin/teams/abc123/builder/[workflow_id]`
     *
     * If not provided, the last published flow is used instead.
     */
    workflow_id?: string;
    /**
     * An identifier from your own systems, to avoid needing to store Vouchsafe's own ID
     */
    external_id?: string;
    /**
     * A generic or unique URL to send the user back to upon success.
     *
     * If not provided, the verification flow default will be used.
     */
    redirect_url?: string;
    /**
     * When will the verification session expire and the user cease getting reminders?
     *
     * If not provided, the verification flow default will be used.
     */
    expires_at?: string;
};

export type Status = 'InProgress' | 'ReadyForReview' | 'Verified' | 'Refused' | 'Cancelled' | 'LockedOut';

export type Verification = {
    /**
     * Unique ID for tracking a verification session over time
     */
    id: string;
    status: Status;
    /**
     * When it was originally requested or begun
     */
    created_at: string;
    /**
     * When the user will stop getting reminders
     */
    expires_at: string;
    /**
     * The originally supplied email address
     */
    email: string | null;
    /**
     * Where to send the user upon success. If null, the verification flow default will be used.
     */
    redirect_url: string | null;
    /**
     * The verification flow it belongs to
     */
    workflow_id: string;
    /**
     * An identifier from your own systems, to avoid needing to store Vouchsafe's own ID. Provided at request time.
     */
    external_id: string | null;
};

export type ListVerificationsResponse = Array<Verification>;

export type GetVerificationResponse = Verification;

export type _36EnumsBackgroundCheck = 'AML' | 'Address' | 'OnlineFootprint' | 'DataBreaches';

export type BackgroundCheck = _36EnumsBackgroundCheck;

export type CheckState = 'PASS' | 'FAIL' | 'PARTIAL' | 'NOT_PERFORMED';

export type Reason = 'INVALID_POSTCODE' | 'INVALID_ADDRESS' | 'MED_MATCH_PERSON_AT_ADDRESS' | 'LOW_MATCH_PERSON_AT_ADDRESS';

export type CheckResult = {
    state: CheckState;
    reason?: Reason;
};

/**
 * Construct a type with a set of properties K of type T
 */
export type RecordAddressVerificationChecksCheckResult = {
    POSTCODE_EXISTS: CheckResult;
    ADDRESS_EXISTS: CheckResult;
    PERSON_LIVES_AT_ADDRESS: CheckResult;
};

export type Report = {
    state: CheckState;
    checks: RecordAddressVerificationChecksCheckResult;
};

export type GetSmartLookupResponse = {
    id: string;
    team_id: string;
    checks: Array<_36EnumsBackgroundCheck>;
    first_name: string | null;
    last_name: string | null;
    first_line_of_address: string | null;
    postcode: string | null;
    /**
     * Whether the overall check and its sub-checks passed, failed or somethng else.
     */
    address_verification_report: Report | null;
    /**
     * Extra information to aid debugging. May change without notice.
     */
    metadata: unknown;
    created_at: string;
};

export type SmartLookupInput = {
    /**
     * Should be taken from GET /postcode endpoint
     */
    first_line_of_address: string;
    postcode: string;
    first_name: string;
    last_name: string;
    /**
     * Experimental, other checks coming soon
     */
    checks: Array<'Address'>;
};

export type PostcodeResponse = {
    addresses: Array<string>;
};

export type AuthenticateResponse = {
    access_token: string;
    expires_at: string;
};

export type AuthenticateRequestBody = {
    client_id: string;
    client_secret: string;
};

export type ListVerificationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional status filter.
         */
        status?: Status;
    };
    url: '/verifications';
};

export type ListVerificationsErrors = {
    /**
     * Bad request
     */
    400: ApiErrorResponse;
    /**
     * Unauthorised
     */
    401: ApiErrorResponse;
};

export type ListVerificationsError = ListVerificationsErrors[keyof ListVerificationsErrors];

export type ListVerificationsResponses = {
    /**
     * OK
     */
    200: ListVerificationsResponse;
};

export type ListVerificationsResponse2 = ListVerificationsResponses[keyof ListVerificationsResponses];

export type RequestVerificationData = {
    body: RequestVerificationRequestBody;
    path?: never;
    query?: never;
    url: '/verifications';
};

export type RequestVerificationErrors = {
    /**
     * Bad request
     */
    400: ApiErrorResponse;
    /**
     * Unauthorised
     */
    401: ApiErrorResponse;
};

export type RequestVerificationError = RequestVerificationErrors[keyof RequestVerificationErrors];

export type RequestVerificationResponses = {
    /**
     * Verification created
     */
    200: RequestVerificationResponse;
};

export type RequestVerificationResponse2 = RequestVerificationResponses[keyof RequestVerificationResponses];

export type GetVerificationData = {
    body?: never;
    path: {
        /**
         * The verification ID returned when you requested it.
         */
        id: string;
    };
    query?: never;
    url: '/verifications/{id}';
};

export type GetVerificationErrors = {
    /**
     * Bad request
     */
    400: ApiErrorResponse;
    /**
     * Unauthorised
     */
    401: ApiErrorResponse;
    /**
     * Not found
     */
    404: ApiErrorResponse;
};

export type GetVerificationError = GetVerificationErrors[keyof GetVerificationErrors];

export type GetVerificationResponses = {
    /**
     * OK
     */
    200: Verification;
};

export type GetVerificationResponse2 = GetVerificationResponses[keyof GetVerificationResponses];

export type PerformSmartLookupData = {
    body: SmartLookupInput;
    path?: never;
    query?: never;
    url: '/smart-lookups';
};

export type PerformSmartLookupErrors = {
    /**
     * Bad request
     */
    400: ApiErrorResponse;
    /**
     * Unauthorised
     */
    401: ApiErrorResponse;
};

export type PerformSmartLookupError = PerformSmartLookupErrors[keyof PerformSmartLookupErrors];

export type PerformSmartLookupResponses = {
    /**
     * Performed successfully, report available
     */
    201: GetSmartLookupResponse;
};

export type PerformSmartLookupResponse = PerformSmartLookupResponses[keyof PerformSmartLookupResponses];

export type SearchPostcodeData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UK postcode to search for.
         * Example: `SW1A 2AA`
         * Can be with or without space. Case insensitive.
         */
        postcode: string;
    };
    url: '/smart-lookups/postcode';
};

export type SearchPostcodeErrors = {
    /**
     * Malformed or non-existent postcode
     */
    400: ApiErrorResponse;
    /**
     * Unauthorised
     */
    401: ApiErrorResponse;
};

export type SearchPostcodeError = SearchPostcodeErrors[keyof SearchPostcodeErrors];

export type SearchPostcodeResponses = {
    /**
     * A list of matching addresses
     */
    200: PostcodeResponse;
};

export type SearchPostcodeResponse = SearchPostcodeResponses[keyof SearchPostcodeResponses];

export type AuthenticateData = {
    body: AuthenticateRequestBody;
    path?: never;
    query?: never;
    url: '/authenticate';
};

export type AuthenticateErrors = {
    /**
     * Bad request
     */
    400: ApiErrorResponse;
    /**
     * Unauthorised
     */
    401: ApiErrorResponse;
};

export type AuthenticateError = AuthenticateErrors[keyof AuthenticateErrors];

export type AuthenticateResponses = {
    /**
     * Token created successfully
     */
    201: AuthenticateResponse;
};

export type AuthenticateResponse2 = AuthenticateResponses[keyof AuthenticateResponses];

export type ClientOptions = {
    baseUrl: 'https://app.vouchsafe.id/api/v1' | 'https://app.vouchsafe.id/api/v1/sandbox' | 'https://app.vouchsafe.id/api/v1' | 'https://app.vouchsafe.id/api/v1/sandbox' | 'https://app.vouchsafe.id/api/v1' | 'https://app.vouchsafe.id/api/v1/sandbox' | 'https://app.vouchsafe.id/api/v1' | 'https://app.vouchsafe.id/api/v1/sandbox' | 'https://app.vouchsafe.id/api/v1' | (string & {});
};